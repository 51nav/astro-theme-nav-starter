---
import styles from '../styles/components/sidebar.module.css';
import type { MenuItem } from '../types/config';
import configData from '../data/config.json';
import IconComponent from './IconComponent.astro';

const { menuItems } = configData as { menuItems: MenuItem[] };
---

<aside class={styles.sidebar}>
  <nav class={styles.nav}>
    <ul class={styles.list}>
      {menuItems.map((item) => (
        <li>
          {item.type === 'single' ? (
            <a
              href={item.href}
              class={styles.link}
              data-section={item.href}
              data-type="main"
              data-scroll
            >
              <IconComponent 
                icon={item.icon || ''} 
                class={styles.icon || undefined} 
              />
              <span class={styles.text}>{item.name}</span>
            </a>
          ) : (
            <div>
              <button
                type="button"
                class={`${styles.link} ${styles.hasSubmenu}`}
                data-section={item.href}
                data-type="main"
                aria-expanded="false"
                data-submenu-trigger
              >
                <IconComponent 
                  icon={item.icon || ''} 
                  class={styles.icon || undefined} 
                />
                <span class={styles.text}>{item.name}</span>
                <span class={styles.arrow}>
                  <svg viewBox="0 0 24 24" class={styles.arrowIcon}>
                    <path fill="currentColor" d="M7 10l5 5 5-5H7z"/>
                  </svg>
                </span>
              </button>
              {item.submenu && (
                <ul class={styles.submenu} data-expanded="false">
                  {item.submenu.map((subItem, subIndex) => (
                    <li>
                      <a
                        href={subItem.href}
                        class={styles.submenuLink}
                        data-section={subItem.href}
                        data-parent-section={item.href}
                        data-type="sub"
                        data-tab-index={subIndex}
                        data-scroll
                      >
                        <IconComponent icon={subItem.icon} class={styles.submenuIcon} />
                        <span class={styles.text}>{subItem.name}</span>
                      </a>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          )}
        </li>
      ))}
    </ul>
  </nav>
</aside>

<script>
  // 初始化侧边栏
  function initSidebar() {
    const menuButtons = document.querySelectorAll('[data-submenu-trigger]');
    menuButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!isExpanded).toString());
        
        const submenu = button.nextElementSibling;
        if (submenu) {
          submenu.setAttribute('data-expanded', (!isExpanded).toString());
        }
      });
    });

    // 处理导航点击
    document.querySelectorAll('a[data-scroll]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const href = link.getAttribute('href');
        if (!href) return;

        // 如果不在首页，先返回首页
        if (!window.location.pathname.endsWith('/')) {
          // 直接跳转到首页
          window.location.href = href;
          return;
        }

        // 在首页时平滑滚动到目标位置
        const target = document.querySelector(href);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });
  }

  document.addEventListener('DOMContentLoaded', initSidebar);
</script> 